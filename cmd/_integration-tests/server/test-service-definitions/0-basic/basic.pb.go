// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: basic.proto

package basic

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/metaverse/truss/deftree/googlethirdparty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BasicTypeRequest struct {
	A float64 `protobuf:"fixed64,1,opt,name=A,proto3" json:"A,omitempty"`
	B float32 `protobuf:"fixed32,2,opt,name=B,proto3" json:"B,omitempty"`
	C int32   `protobuf:"varint,3,opt,name=C,proto3" json:"C,omitempty"`
	D int64   `protobuf:"varint,4,opt,name=D,proto3" json:"D,omitempty"`
	E uint32  `protobuf:"varint,5,opt,name=E,proto3" json:"E,omitempty"`
	F uint64  `protobuf:"varint,6,opt,name=F,proto3" json:"F,omitempty"`
	G int32   `protobuf:"zigzag32,7,opt,name=G,proto3" json:"G,omitempty"`
	H int64   `protobuf:"zigzag64,8,opt,name=H,proto3" json:"H,omitempty"`
	I uint32  `protobuf:"fixed32,9,opt,name=I,proto3" json:"I,omitempty"`
	J uint64  `protobuf:"fixed64,10,opt,name=J,proto3" json:"J,omitempty"`
	K int32   `protobuf:"fixed32,11,opt,name=K,proto3" json:"K,omitempty"`
	L bool    `protobuf:"varint,12,opt,name=L,proto3" json:"L,omitempty"`
	M string  `protobuf:"bytes,13,opt,name=M,proto3" json:"M,omitempty"`
	N []byte  `protobuf:"bytes,14,opt,name=N,proto3" json:"N,omitempty"`
}

func (m *BasicTypeRequest) Reset()         { *m = BasicTypeRequest{} }
func (m *BasicTypeRequest) String() string { return proto.CompactTextString(m) }
func (*BasicTypeRequest) ProtoMessage()    {}
func (*BasicTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc45f6ac745dd88, []int{0}
}
func (m *BasicTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasicTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BasicTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BasicTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicTypeRequest.Merge(m, src)
}
func (m *BasicTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *BasicTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BasicTypeRequest proto.InternalMessageInfo

func (m *BasicTypeRequest) GetA() float64 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *BasicTypeRequest) GetB() float32 {
	if m != nil {
		return m.B
	}
	return 0
}

func (m *BasicTypeRequest) GetC() int32 {
	if m != nil {
		return m.C
	}
	return 0
}

func (m *BasicTypeRequest) GetD() int64 {
	if m != nil {
		return m.D
	}
	return 0
}

func (m *BasicTypeRequest) GetE() uint32 {
	if m != nil {
		return m.E
	}
	return 0
}

func (m *BasicTypeRequest) GetF() uint64 {
	if m != nil {
		return m.F
	}
	return 0
}

func (m *BasicTypeRequest) GetG() int32 {
	if m != nil {
		return m.G
	}
	return 0
}

func (m *BasicTypeRequest) GetH() int64 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *BasicTypeRequest) GetI() uint32 {
	if m != nil {
		return m.I
	}
	return 0
}

func (m *BasicTypeRequest) GetJ() uint64 {
	if m != nil {
		return m.J
	}
	return 0
}

func (m *BasicTypeRequest) GetK() int32 {
	if m != nil {
		return m.K
	}
	return 0
}

func (m *BasicTypeRequest) GetL() bool {
	if m != nil {
		return m.L
	}
	return false
}

func (m *BasicTypeRequest) GetM() string {
	if m != nil {
		return m.M
	}
	return ""
}

func (m *BasicTypeRequest) GetN() []byte {
	if m != nil {
		return m.N
	}
	return nil
}

type BasicTypeResponse struct {
	A float64 `protobuf:"fixed64,1,opt,name=A,proto3" json:"A,omitempty"`
	B float32 `protobuf:"fixed32,2,opt,name=B,proto3" json:"B,omitempty"`
	C int32   `protobuf:"varint,3,opt,name=C,proto3" json:"C,omitempty"`
	D int64   `protobuf:"varint,4,opt,name=D,proto3" json:"D,omitempty"`
	E uint32  `protobuf:"varint,5,opt,name=E,proto3" json:"E,omitempty"`
	F uint64  `protobuf:"varint,6,opt,name=F,proto3" json:"F,omitempty"`
	G int32   `protobuf:"zigzag32,7,opt,name=G,proto3" json:"G,omitempty"`
	H int64   `protobuf:"zigzag64,8,opt,name=H,proto3" json:"H,omitempty"`
	I uint32  `protobuf:"fixed32,9,opt,name=I,proto3" json:"I,omitempty"`
	J uint64  `protobuf:"fixed64,10,opt,name=J,proto3" json:"J,omitempty"`
	K int32   `protobuf:"fixed32,11,opt,name=K,proto3" json:"K,omitempty"`
	L bool    `protobuf:"varint,12,opt,name=L,proto3" json:"L,omitempty"`
	M string  `protobuf:"bytes,13,opt,name=M,proto3" json:"M,omitempty"`
	N []byte  `protobuf:"bytes,14,opt,name=N,proto3" json:"N,omitempty"`
}

func (m *BasicTypeResponse) Reset()         { *m = BasicTypeResponse{} }
func (m *BasicTypeResponse) String() string { return proto.CompactTextString(m) }
func (*BasicTypeResponse) ProtoMessage()    {}
func (*BasicTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc45f6ac745dd88, []int{1}
}
func (m *BasicTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasicTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BasicTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BasicTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicTypeResponse.Merge(m, src)
}
func (m *BasicTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *BasicTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BasicTypeResponse proto.InternalMessageInfo

func (m *BasicTypeResponse) GetA() float64 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *BasicTypeResponse) GetB() float32 {
	if m != nil {
		return m.B
	}
	return 0
}

func (m *BasicTypeResponse) GetC() int32 {
	if m != nil {
		return m.C
	}
	return 0
}

func (m *BasicTypeResponse) GetD() int64 {
	if m != nil {
		return m.D
	}
	return 0
}

func (m *BasicTypeResponse) GetE() uint32 {
	if m != nil {
		return m.E
	}
	return 0
}

func (m *BasicTypeResponse) GetF() uint64 {
	if m != nil {
		return m.F
	}
	return 0
}

func (m *BasicTypeResponse) GetG() int32 {
	if m != nil {
		return m.G
	}
	return 0
}

func (m *BasicTypeResponse) GetH() int64 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *BasicTypeResponse) GetI() uint32 {
	if m != nil {
		return m.I
	}
	return 0
}

func (m *BasicTypeResponse) GetJ() uint64 {
	if m != nil {
		return m.J
	}
	return 0
}

func (m *BasicTypeResponse) GetK() int32 {
	if m != nil {
		return m.K
	}
	return 0
}

func (m *BasicTypeResponse) GetL() bool {
	if m != nil {
		return m.L
	}
	return false
}

func (m *BasicTypeResponse) GetM() string {
	if m != nil {
		return m.M
	}
	return ""
}

func (m *BasicTypeResponse) GetN() []byte {
	if m != nil {
		return m.N
	}
	return nil
}

func init() {
	proto.RegisterType((*BasicTypeRequest)(nil), "basic.BasicTypeRequest")
	proto.RegisterType((*BasicTypeResponse)(nil), "basic.BasicTypeResponse")
}

func init() { proto.RegisterFile("basic.proto", fileDescriptor_0cc45f6ac745dd88) }

var fileDescriptor_0cc45f6ac745dd88 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0xd2, 0x4f, 0x6e, 0xd3, 0x40,
	0x18, 0x05, 0xf0, 0x3c, 0xd7, 0xf9, 0x37, 0x4d, 0x80, 0x7a, 0xc3, 0xa7, 0x2e, 0xac, 0x91, 0x57,
	0x23, 0x16, 0xb1, 0x28, 0x3b, 0x76, 0x75, 0xeb, 0xa6, 0x69, 0xd3, 0x0a, 0x0d, 0xb9, 0x80, 0x93,
	0x0c, 0x89, 0x25, 0xe2, 0x31, 0x9e, 0x09, 0x52, 0xb6, 0x9c, 0x00, 0x89, 0x03, 0x70, 0x1d, 0x96,
	0x91, 0x90, 0x80, 0x25, 0x4a, 0x38, 0x08, 0x1a, 0x67, 0x83, 0x40, 0x88, 0x3d, 0xcb, 0x9f, 0x3e,
	0xe9, 0x49, 0x6f, 0xe6, 0xb1, 0xe3, 0x69, 0x66, 0xf2, 0xd9, 0xa0, 0xac, 0xb4, 0xd5, 0x41, 0xb3,
	0xc6, 0x69, 0xba, 0xc8, 0xed, 0x72, 0x3d, 0x1d, 0xcc, 0xf4, 0x2a, 0x5e, 0x29, 0x9b, 0xbd, 0x55,
	0x95, 0x51, 0xb1, 0xad, 0xd6, 0xc6, 0xc4, 0x73, 0xf5, 0xca, 0x56, 0x4a, 0xc5, 0x0b, 0xad, 0x17,
	0xaf, 0x95, 0x5d, 0xe6, 0xd5, 0xbc, 0xcc, 0x2a, 0xbb, 0x89, 0xb3, 0xa2, 0xd0, 0x36, 0xb3, 0xb9,
	0x2e, 0xcc, 0x21, 0x2d, 0xfa, 0x02, 0xf6, 0x28, 0x71, 0x81, 0x93, 0x4d, 0xa9, 0xa4, 0x7a, 0xb3,
	0x56, 0xc6, 0x06, 0x3d, 0x86, 0x73, 0x02, 0x87, 0x80, 0xc4, 0xb9, 0x53, 0x42, 0x1e, 0x87, 0xf0,
	0x24, 0x12, 0xa7, 0x0b, 0x3a, 0xe2, 0x10, 0x4d, 0x89, 0x0b, 0xa7, 0x4b, 0xf2, 0x39, 0xc4, 0x91,
	0xc4, 0xa5, 0x53, 0x4a, 0x4d, 0x0e, 0xd1, 0x97, 0x48, 0x9d, 0xae, 0xa8, 0xc5, 0x21, 0x7c, 0x89,
	0x2b, 0xa7, 0x21, 0xb5, 0x39, 0xc4, 0x89, 0xc4, 0xd0, 0xe9, 0x9a, 0x3a, 0x1c, 0x22, 0x90, 0xb8,
	0x76, 0x1a, 0x51, 0x97, 0x43, 0xb4, 0x25, 0x46, 0x4e, 0x37, 0xc4, 0x38, 0x44, 0x4b, 0xe2, 0xc6,
	0xe9, 0x96, 0x8e, 0x39, 0xc4, 0x43, 0x89, 0x5b, 0xa7, 0x31, 0xf5, 0x38, 0x44, 0x47, 0x62, 0xec,
	0x74, 0x47, 0x7d, 0x0e, 0xd1, 0x95, 0xb8, 0x73, 0xba, 0xa7, 0x07, 0x1c, 0xa2, 0x27, 0x71, 0x1f,
	0x7d, 0x05, 0x3b, 0xf9, 0xa5, 0x98, 0x29, 0x75, 0x61, 0xd4, 0xff, 0xd0, 0xec, 0xec, 0x23, 0x98,
	0x3f, 0x49, 0x5f, 0x4e, 0x82, 0x11, 0xeb, 0x0c, 0x95, 0xad, 0x4b, 0x06, 0x8f, 0x07, 0x87, 0x8d,
	0xfc, 0xfe, 0x97, 0xa7, 0xf4, 0xe7, 0xe1, 0xf0, 0x16, 0x11, 0x7b, 0xf7, 0xf9, 0xc7, 0x07, 0xcf,
	0x0f, 0xbc, 0xf8, 0x69, 0x30, 0x66, 0xdd, 0x17, 0xda, 0xfc, 0x2b, 0xeb, 0x6f, 0x87, 0xa8, 0x5f,
	0x47, 0xb5, 0x23, 0x2f, 0x3e, 0x7b, 0x8e, 0x27, 0x09, 0x7d, 0xda, 0x85, 0xd8, 0xee, 0x42, 0x7c,
	0xdf, 0x85, 0x78, 0xbf, 0x0f, 0x1b, 0xdb, 0x7d, 0xd8, 0xf8, 0xb6, 0x0f, 0x1b, 0xd3, 0x56, 0xbd,
	0xba, 0x67, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x11, 0xd6, 0x9d, 0x2b, 0xd2, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TESTClient is the client API for TEST service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TESTClient interface {
	GetBasic(ctx context.Context, in *BasicTypeRequest, opts ...grpc.CallOption) (*BasicTypeResponse, error)
	PostBasic(ctx context.Context, in *BasicTypeRequest, opts ...grpc.CallOption) (*BasicTypeRequest, error)
}

type tESTClient struct {
	cc *grpc.ClientConn
}

func NewTESTClient(cc *grpc.ClientConn) TESTClient {
	return &tESTClient{cc}
}

func (c *tESTClient) GetBasic(ctx context.Context, in *BasicTypeRequest, opts ...grpc.CallOption) (*BasicTypeResponse, error) {
	out := new(BasicTypeResponse)
	err := c.cc.Invoke(ctx, "/basic.TEST/GetBasic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tESTClient) PostBasic(ctx context.Context, in *BasicTypeRequest, opts ...grpc.CallOption) (*BasicTypeRequest, error) {
	out := new(BasicTypeRequest)
	err := c.cc.Invoke(ctx, "/basic.TEST/PostBasic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TESTServer is the server API for TEST service.
type TESTServer interface {
	GetBasic(context.Context, *BasicTypeRequest) (*BasicTypeResponse, error)
	PostBasic(context.Context, *BasicTypeRequest) (*BasicTypeRequest, error)
}

// UnimplementedTESTServer can be embedded to have forward compatible implementations.
type UnimplementedTESTServer struct {
}

func (*UnimplementedTESTServer) GetBasic(ctx context.Context, req *BasicTypeRequest) (*BasicTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasic not implemented")
}
func (*UnimplementedTESTServer) PostBasic(ctx context.Context, req *BasicTypeRequest) (*BasicTypeRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostBasic not implemented")
}

func RegisterTESTServer(s *grpc.Server, srv TESTServer) {
	s.RegisterService(&_TEST_serviceDesc, srv)
}

func _TEST_GetBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TESTServer).GetBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basic.TEST/GetBasic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TESTServer).GetBasic(ctx, req.(*BasicTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TEST_PostBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TESTServer).PostBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basic.TEST/PostBasic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TESTServer).PostBasic(ctx, req.(*BasicTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TEST_serviceDesc = grpc.ServiceDesc{
	ServiceName: "basic.TEST",
	HandlerType: (*TESTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBasic",
			Handler:    _TEST_GetBasic_Handler,
		},
		{
			MethodName: "PostBasic",
			Handler:    _TEST_PostBasic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "basic.proto",
}

func (m *BasicTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasicTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.A != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.A))))
		i += 8
	}
	if m.B != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.B))))
		i += 4
	}
	if m.C != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBasic(dAtA, i, uint64(m.C))
	}
	if m.D != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBasic(dAtA, i, uint64(m.D))
	}
	if m.E != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBasic(dAtA, i, uint64(m.E))
	}
	if m.F != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBasic(dAtA, i, uint64(m.F))
	}
	if m.G != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBasic(dAtA, i, uint64((uint32(m.G)<<1)^uint32((m.G>>31))))
	}
	if m.H != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintBasic(dAtA, i, uint64((uint64(m.H)<<1)^uint64((m.H>>63))))
	}
	if m.I != 0 {
		dAtA[i] = 0x4d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.I))
		i += 4
	}
	if m.J != 0 {
		dAtA[i] = 0x51
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.J))
		i += 8
	}
	if m.K != 0 {
		dAtA[i] = 0x5d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.K))
		i += 4
	}
	if m.L {
		dAtA[i] = 0x60
		i++
		if m.L {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.M) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintBasic(dAtA, i, uint64(len(m.M)))
		i += copy(dAtA[i:], m.M)
	}
	if len(m.N) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintBasic(dAtA, i, uint64(len(m.N)))
		i += copy(dAtA[i:], m.N)
	}
	return i, nil
}

func (m *BasicTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasicTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.A != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.A))))
		i += 8
	}
	if m.B != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.B))))
		i += 4
	}
	if m.C != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBasic(dAtA, i, uint64(m.C))
	}
	if m.D != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBasic(dAtA, i, uint64(m.D))
	}
	if m.E != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBasic(dAtA, i, uint64(m.E))
	}
	if m.F != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBasic(dAtA, i, uint64(m.F))
	}
	if m.G != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBasic(dAtA, i, uint64((uint32(m.G)<<1)^uint32((m.G>>31))))
	}
	if m.H != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintBasic(dAtA, i, uint64((uint64(m.H)<<1)^uint64((m.H>>63))))
	}
	if m.I != 0 {
		dAtA[i] = 0x4d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.I))
		i += 4
	}
	if m.J != 0 {
		dAtA[i] = 0x51
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.J))
		i += 8
	}
	if m.K != 0 {
		dAtA[i] = 0x5d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.K))
		i += 4
	}
	if m.L {
		dAtA[i] = 0x60
		i++
		if m.L {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.M) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintBasic(dAtA, i, uint64(len(m.M)))
		i += copy(dAtA[i:], m.M)
	}
	if len(m.N) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintBasic(dAtA, i, uint64(len(m.N)))
		i += copy(dAtA[i:], m.N)
	}
	return i, nil
}

func encodeVarintBasic(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BasicTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.A != 0 {
		n += 9
	}
	if m.B != 0 {
		n += 5
	}
	if m.C != 0 {
		n += 1 + sovBasic(uint64(m.C))
	}
	if m.D != 0 {
		n += 1 + sovBasic(uint64(m.D))
	}
	if m.E != 0 {
		n += 1 + sovBasic(uint64(m.E))
	}
	if m.F != 0 {
		n += 1 + sovBasic(uint64(m.F))
	}
	if m.G != 0 {
		n += 1 + sozBasic(uint64(m.G))
	}
	if m.H != 0 {
		n += 1 + sozBasic(uint64(m.H))
	}
	if m.I != 0 {
		n += 5
	}
	if m.J != 0 {
		n += 9
	}
	if m.K != 0 {
		n += 5
	}
	if m.L {
		n += 2
	}
	l = len(m.M)
	if l > 0 {
		n += 1 + l + sovBasic(uint64(l))
	}
	l = len(m.N)
	if l > 0 {
		n += 1 + l + sovBasic(uint64(l))
	}
	return n
}

func (m *BasicTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.A != 0 {
		n += 9
	}
	if m.B != 0 {
		n += 5
	}
	if m.C != 0 {
		n += 1 + sovBasic(uint64(m.C))
	}
	if m.D != 0 {
		n += 1 + sovBasic(uint64(m.D))
	}
	if m.E != 0 {
		n += 1 + sovBasic(uint64(m.E))
	}
	if m.F != 0 {
		n += 1 + sovBasic(uint64(m.F))
	}
	if m.G != 0 {
		n += 1 + sozBasic(uint64(m.G))
	}
	if m.H != 0 {
		n += 1 + sozBasic(uint64(m.H))
	}
	if m.I != 0 {
		n += 5
	}
	if m.J != 0 {
		n += 9
	}
	if m.K != 0 {
		n += 5
	}
	if m.L {
		n += 2
	}
	l = len(m.M)
	if l > 0 {
		n += 1 + l + sovBasic(uint64(l))
	}
	l = len(m.N)
	if l > 0 {
		n += 1 + l + sovBasic(uint64(l))
	}
	return n
}

func sovBasic(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBasic(x uint64) (n int) {
	return sovBasic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BasicTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasicTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasicTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.A = float64(math.Float64frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.B = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			m.C = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.C |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			m.D = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.D |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			m.E = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.E |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
			m.F = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field G", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.G = v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.H = int64(v)
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field I", wireType)
			}
			m.I = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.I = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field J", wireType)
			}
			m.J = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.J = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field K", wireType)
			}
			m.K = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.K = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field M", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.M = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBasic
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBasic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.N = append(m.N[:0], dAtA[iNdEx:postIndex]...)
			if m.N == nil {
				m.N = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBasic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBasic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BasicTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasicTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasicTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.A = float64(math.Float64frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.B = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			m.C = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.C |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			m.D = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.D |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			m.E = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.E |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
			m.F = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field G", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.G = v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.H = int64(v)
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field I", wireType)
			}
			m.I = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.I = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field J", wireType)
			}
			m.J = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.J = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field K", wireType)
			}
			m.K = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.K = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field M", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.M = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBasic
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBasic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.N = append(m.N[:0], dAtA[iNdEx:postIndex]...)
			if m.N == nil {
				m.N = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBasic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBasic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBasic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBasic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBasic
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthBasic
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBasic
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBasic(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthBasic
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBasic = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBasic   = fmt.Errorf("proto: integer overflow")
)
