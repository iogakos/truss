// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: ff051dd8a6
// Version Date: Sun 15 Mar 23:19:53 UTC 2020

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/metaverse/truss/cmd/_integration-tests/server/test-service-definitions/0-basic"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC TESTServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.TESTServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// test

		getbasic: grpctransport.NewServer(
			endpoints.GetBasicEndpoint,
			DecodeGRPCGetBasicRequest,
			EncodeGRPCGetBasicResponse,
			serverOptions...,
		),
		postbasic: grpctransport.NewServer(
			endpoints.PostBasicEndpoint,
			DecodeGRPCPostBasicRequest,
			EncodeGRPCPostBasicResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the TESTServer interface
type grpcServer struct {
	getbasic  grpctransport.Handler
	postbasic grpctransport.Handler
}

// Methods for grpcServer to implement TESTServer interface

func (s *grpcServer) GetBasic(ctx context.Context, req *pb.BasicTypeRequest) (*pb.BasicTypeResponse, error) {
	_, rep, err := s.getbasic.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.BasicTypeResponse), nil
}

func (s *grpcServer) PostBasic(ctx context.Context, req *pb.BasicTypeRequest) (*pb.BasicTypeRequest, error) {
	_, rep, err := s.postbasic.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.BasicTypeRequest), nil
}

// Server Decode

// DecodeGRPCGetBasicRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC getbasic request to a user-domain getbasic request. Primarily useful in a server.
func DecodeGRPCGetBasicRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.BasicTypeRequest)
	return req, nil
}

// DecodeGRPCPostBasicRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC postbasic request to a user-domain postbasic request. Primarily useful in a server.
func DecodeGRPCPostBasicRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.BasicTypeRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCGetBasicResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain getbasic response to a gRPC getbasic reply. Primarily useful in a server.
func EncodeGRPCGetBasicResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.BasicTypeResponse)
	return resp, nil
}

// EncodeGRPCPostBasicResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain postbasic response to a gRPC postbasic reply. Primarily useful in a server.
func EncodeGRPCPostBasicResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.BasicTypeRequest)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
