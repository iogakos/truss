// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: ff051dd8a6
// Version Date: Sun 15 Mar 23:19:53 UTC 2020

package svc

// This file provides server-side bindings for the HTTP transport.
// It utilizes the transport/http.Server.

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"

	"github.com/gogo/protobuf/jsonpb"
	"github.com/gogo/protobuf/proto"

	"context"

	httptransport "github.com/go-kit/kit/transport/http"
	"github.com/gorilla/mux"
	"github.com/pkg/errors"

	// This service
	pb "github.com/metaverse/truss/cmd/_integration-tests/server/test-service-definitions/0-basic"
)

const contentType = "application/json; charset=utf-8"

var (
	_ = fmt.Sprint
	_ = bytes.Compare
	_ = strconv.Atoi
	_ = httptransport.NewServer
	_ = ioutil.NopCloser
	_ = pb.NewTESTClient
	_ = io.Copy
	_ = errors.Wrap
)

// MakeHTTPHandler returns a handler that makes a set of endpoints available
// on predefined paths.
func MakeHTTPHandler(endpoints Endpoints, options ...httptransport.ServerOption) http.Handler {
	serverOptions := []httptransport.ServerOption{
		httptransport.ServerBefore(headersToContext),
		httptransport.ServerErrorEncoder(errorEncoder),
		httptransport.ServerAfter(httptransport.SetContentType(contentType)),
	}
	serverOptions = append(serverOptions, options...)
	m := mux.NewRouter()

	m.Methods("GET").Path("/1").Handler(httptransport.NewServer(
		endpoints.GetBasicEndpoint,
		DecodeHTTPGetBasicZeroRequest,
		EncodeHTTPGenericResponse,
		serverOptions...,
	))

	m.Methods("POST").Path("/2").Handler(httptransport.NewServer(
		endpoints.PostBasicEndpoint,
		DecodeHTTPPostBasicZeroRequest,
		EncodeHTTPGenericResponse,
		serverOptions...,
	))
	return m
}

// ErrorEncoder writes the error to the ResponseWriter, by default a content
// type of application/json, a body of json with key "error" and the value
// error.Error(), and a status code of 500. If the error implements Headerer,
// the provided headers will be applied to the response. If the error
// implements json.Marshaler, and the marshaling succeeds, the JSON encoded
// form of the error will be used. If the error implements StatusCoder, the
// provided StatusCode will be used instead of 500.
func errorEncoder(_ context.Context, err error, w http.ResponseWriter) {
	body, _ := json.Marshal(errorWrapper{Error: err.Error()})
	if marshaler, ok := err.(json.Marshaler); ok {
		if jsonBody, marshalErr := marshaler.MarshalJSON(); marshalErr == nil {
			body = jsonBody
		}
	}
	w.Header().Set("Content-Type", contentType)
	if headerer, ok := err.(httptransport.Headerer); ok {
		for k := range headerer.Headers() {
			w.Header().Set(k, headerer.Headers().Get(k))
		}
	}
	code := http.StatusInternalServerError
	if sc, ok := err.(httptransport.StatusCoder); ok {
		code = sc.StatusCode()
	}
	w.WriteHeader(code)
	w.Write(body)
}

type errorWrapper struct {
	Error string `json:"error"`
}

// httpError satisfies the Headerer and StatusCoder interfaces in
// package github.com/go-kit/kit/transport/http.
type httpError struct {
	error
	statusCode int
	headers    map[string][]string
}

func (h httpError) StatusCode() int {
	return h.statusCode
}

func (h httpError) Headers() http.Header {
	return h.headers
}

// Server Decode

// DecodeHTTPGetBasicZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded getbasic request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPGetBasicZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.BasicTypeRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := mux.Vars(r)
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	if AGetBasicStrArr, ok := queryParams["A"]; ok {
		AGetBasicStr := AGetBasicStrArr[0]
		AGetBasic, err := strconv.ParseFloat(AGetBasicStr, 64)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting AGetBasic from query, queryParams: %v", queryParams))
		}
		req.A = AGetBasic
	}

	if BGetBasicStrArr, ok := queryParams["B"]; ok {
		BGetBasicStr := BGetBasicStrArr[0]
		BGetBasic, err := strconv.ParseFloat(BGetBasicStr, 32)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting BGetBasic from query, queryParams: %v", queryParams))
		}
		req.B = float32(BGetBasic)
	}

	if CGetBasicStrArr, ok := queryParams["C"]; ok {
		CGetBasicStr := CGetBasicStrArr[0]
		CGetBasic, err := strconv.ParseInt(CGetBasicStr, 10, 32)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting CGetBasic from query, queryParams: %v", queryParams))
		}
		req.C = int32(CGetBasic)
	}

	if DGetBasicStrArr, ok := queryParams["D"]; ok {
		DGetBasicStr := DGetBasicStrArr[0]
		DGetBasic, err := strconv.ParseInt(DGetBasicStr, 10, 64)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting DGetBasic from query, queryParams: %v", queryParams))
		}
		req.D = DGetBasic
	}

	if EGetBasicStrArr, ok := queryParams["E"]; ok {
		EGetBasicStr := EGetBasicStrArr[0]
		EGetBasic, err := strconv.ParseUint(EGetBasicStr, 10, 32)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting EGetBasic from query, queryParams: %v", queryParams))
		}
		req.E = uint32(EGetBasic)
	}

	if FGetBasicStrArr, ok := queryParams["F"]; ok {
		FGetBasicStr := FGetBasicStrArr[0]
		FGetBasic, err := strconv.ParseUint(FGetBasicStr, 10, 64)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting FGetBasic from query, queryParams: %v", queryParams))
		}
		req.F = FGetBasic
	}

	if GGetBasicStrArr, ok := queryParams["G"]; ok {
		GGetBasicStr := GGetBasicStrArr[0]
		GGetBasic, err := strconv.ParseInt(GGetBasicStr, 10, 32)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting GGetBasic from query, queryParams: %v", queryParams))
		}
		req.G = int32(GGetBasic)
	}

	if HGetBasicStrArr, ok := queryParams["H"]; ok {
		HGetBasicStr := HGetBasicStrArr[0]
		HGetBasic, err := strconv.ParseInt(HGetBasicStr, 10, 64)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting HGetBasic from query, queryParams: %v", queryParams))
		}
		req.H = HGetBasic
	}

	if IGetBasicStrArr, ok := queryParams["I"]; ok {
		IGetBasicStr := IGetBasicStrArr[0]
		IGetBasic, err := strconv.ParseUint(IGetBasicStr, 10, 32)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting IGetBasic from query, queryParams: %v", queryParams))
		}
		req.I = uint32(IGetBasic)
	}

	if JGetBasicStrArr, ok := queryParams["J"]; ok {
		JGetBasicStr := JGetBasicStrArr[0]
		JGetBasic, err := strconv.ParseUint(JGetBasicStr, 10, 64)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting JGetBasic from query, queryParams: %v", queryParams))
		}
		req.J = JGetBasic
	}

	if KGetBasicStrArr, ok := queryParams["K"]; ok {
		KGetBasicStr := KGetBasicStrArr[0]
		KGetBasic, err := strconv.ParseInt(KGetBasicStr, 10, 32)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting KGetBasic from query, queryParams: %v", queryParams))
		}
		req.K = int32(KGetBasic)
	}

	if LGetBasicStrArr, ok := queryParams["L"]; ok {
		LGetBasicStr := LGetBasicStrArr[0]
		LGetBasic, err := strconv.ParseBool(LGetBasicStr)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting LGetBasic from query, queryParams: %v", queryParams))
		}
		req.L = LGetBasic
	}

	if MGetBasicStrArr, ok := queryParams["M"]; ok {
		MGetBasicStr := MGetBasicStrArr[0]
		MGetBasic := MGetBasicStr
		req.M = MGetBasic
	}

	if NGetBasicStrArr, ok := queryParams["N"]; ok {
		NGetBasicStr := NGetBasicStrArr[0]

		var NGetBasic []byte
		err = json.Unmarshal([]byte(NGetBasicStr), &NGetBasic)
		if err != nil {
			return nil, errors.Wrapf(err, "couldn't decode NGetBasic from %v", NGetBasicStr)
		}
		req.N = NGetBasic
	}

	return &req, err
}

// DecodeHTTPPostBasicZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded postbasic request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPPostBasicZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.BasicTypeRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := mux.Vars(r)
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// EncodeHTTPGenericResponse is a transport/http.EncodeResponseFunc that encodes
// the response as JSON to the response writer. Primarily useful in a server.
func EncodeHTTPGenericResponse(_ context.Context, w http.ResponseWriter, response interface{}) error {
	marshaller := jsonpb.Marshaler{
		EmitDefaults: false,
		OrigName:     true,
	}

	return marshaller.Marshal(w, response.(proto.Message))
}

// Helper functions

func headersToContext(ctx context.Context, r *http.Request) context.Context {
	for k, _ := range r.Header {
		// The key is added both in http format (k) which has had
		// http.CanonicalHeaderKey called on it in transport as well as the
		// strings.ToLower which is the grpc metadata format of the key so
		// that it can be accessed in either format
		ctx = context.WithValue(ctx, k, r.Header.Get(k))
		ctx = context.WithValue(ctx, strings.ToLower(k), r.Header.Get(k))
	}

	// Tune specific change.
	// also add the request url
	ctx = context.WithValue(ctx, "request-url", r.URL.Path)
	ctx = context.WithValue(ctx, "transport", "HTTPJSON")

	return ctx
}
