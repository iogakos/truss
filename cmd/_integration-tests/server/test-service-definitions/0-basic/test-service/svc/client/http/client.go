// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: ff051dd8a6
// Version Date: Sun 15 Mar 23:19:53 UTC 2020

// Package http provides an HTTP client for the TEST service.
package http

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/gogo/protobuf/jsonpb"

	"github.com/go-kit/kit/endpoint"
	httptransport "github.com/go-kit/kit/transport/http"
	"github.com/pkg/errors"

	// This Service
	pb "github.com/metaverse/truss/cmd/_integration-tests/server/test-service-definitions/0-basic"
	"github.com/metaverse/truss/cmd/_integration-tests/server/test-service-definitions/0-basic/test-service/svc"
)

var (
	_ = endpoint.Chain
	_ = httptransport.NewClient
	_ = fmt.Sprint
	_ = bytes.Compare
	_ = ioutil.NopCloser
)

// New returns a service backed by an HTTP server living at the remote
// instance. We expect instance to come from a service discovery system, so
// likely of the form "host:port".
func New(instance string, options ...httptransport.ClientOption) (pb.TESTServer, error) {

	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}
	u, err := url.Parse(instance)
	if err != nil {
		return nil, err
	}
	_ = u

	var GetBasicZeroEndpoint endpoint.Endpoint
	{
		GetBasicZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/1"),
			EncodeHTTPGetBasicZeroRequest,
			DecodeHTTPGetBasicResponse,
			options...,
		).Endpoint()
	}
	var PostBasicZeroEndpoint endpoint.Endpoint
	{
		PostBasicZeroEndpoint = httptransport.NewClient(
			"POST",
			copyURL(u, "/2"),
			EncodeHTTPPostBasicZeroRequest,
			DecodeHTTPPostBasicResponse,
			options...,
		).Endpoint()
	}

	return svc.Endpoints{
		GetBasicEndpoint:  GetBasicZeroEndpoint,
		PostBasicEndpoint: PostBasicZeroEndpoint,
	}, nil
}

func copyURL(base *url.URL, path string) *url.URL {
	next := *base
	next.Path = path
	return &next
}

// CtxValuesToSend configures the http client to pull the specified keys out of
// the context and add them to the http request as headers.  Note that keys
// will have net/http.CanonicalHeaderKey called on them before being send over
// the wire and that is the form they will be available in the server context.
func CtxValuesToSend(keys ...string) httptransport.ClientOption {
	return httptransport.ClientBefore(func(ctx context.Context, r *http.Request) context.Context {
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				r.Header.Set(k, v)
			}
		}
		return ctx
	})
}

// HTTP Client Decode

// DecodeHTTPGetBasicResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded BasicTypeResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPGetBasicResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.BasicTypeResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPPostBasicResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded BasicTypeRequest response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPPostBasicResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.BasicTypeRequest
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// HTTP Client Encode

// EncodeHTTPGetBasicZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a getbasic request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPGetBasicZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.BasicTypeRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"1",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("A", fmt.Sprint(req.A))

	values.Add("B", fmt.Sprint(req.B))

	values.Add("C", fmt.Sprint(req.C))

	values.Add("D", fmt.Sprint(req.D))

	values.Add("E", fmt.Sprint(req.E))

	values.Add("F", fmt.Sprint(req.F))

	values.Add("G", fmt.Sprint(req.G))

	values.Add("H", fmt.Sprint(req.H))

	values.Add("I", fmt.Sprint(req.I))

	values.Add("J", fmt.Sprint(req.J))

	values.Add("K", fmt.Sprint(req.K))

	values.Add("L", fmt.Sprint(req.L))

	values.Add("M", fmt.Sprint(req.M))

	tmp, err = json.Marshal(req.N)
	if err != nil {
		return errors.Wrap(err, "failed to marshal req.N")
	}
	strval = string(tmp)
	values.Add("N", strval)

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPPostBasicZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a postbasic request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPPostBasicZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.BasicTypeRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"2",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	r.URL.RawQuery = values.Encode()
	// Set the body parameters
	var buf bytes.Buffer
	toRet := request.(*pb.BasicTypeRequest)

	toRet.A = req.A

	toRet.B = req.B

	toRet.C = req.C

	toRet.D = req.D

	toRet.E = req.E

	toRet.F = req.F

	toRet.G = req.G

	toRet.H = req.H

	toRet.I = req.I

	toRet.J = req.J

	toRet.K = req.K

	toRet.L = req.L

	toRet.M = req.M

	toRet.N = req.N

	encoder := json.NewEncoder(&buf)
	encoder.SetEscapeHTML(false)
	if err := encoder.Encode(toRet); err != nil {
		return errors.Wrapf(err, "couldn't encode body as json %v", toRet)
	}
	r.Body = ioutil.NopCloser(&buf)
	return nil
}

func errorDecoder(buf []byte) error {
	var w errorWrapper
	if err := json.Unmarshal(buf, &w); err != nil {
		const size = 8196
		if len(buf) > size {
			buf = buf[:size]
		}
		return fmt.Errorf("response body '%s': cannot parse non-json request body", buf)
	}

	return errors.New(w.Error)
}

type errorWrapper struct {
	Error string `json:"error"`
}
